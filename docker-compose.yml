services:
  # Orion is the context broker
  orion:
    image: quay.io/fiware/orion-ld
    hostname: orion
    container_name: fiware-orion
    restart: always
    environment:
      - ORIONLD_TROE=TRUE
      - ORIONLD_TROE_USER=orion
      - ORIONLD_TROE_PWD=orion
      - ORIONLD_TROE_HOST=timescale
      - ORIONLD_MONGO_HOST=mongo-db
    depends_on:
      - mongo-db
      - timescale
    networks:
      - fiware_network
    ports:
      - "1026:1026"
    command: -dbhost mongo-db -logLevel DEBUG -forwarding
    extra_hosts:
      - "apr.inf.um.es:155.54.204.147"  # Reemplaza con tu dominio y tu IP pública
    #healthcheck:
     # test: curl --fail -s http://orion:1026/version || exit 1
      #interval: 5s


  # Databases
  mongo-db:
    image: mongo:4.0
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "27017"
    ports:
      - "27017:27017" # localhost:27017
    networks:
      - fiware_network
    command: --nojournal
    volumes:
      - mongo-db:/data/db
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`;
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s

  timescale:
    image: timescale/timescaledb-postgis:1.7.5-pg12
    hostname: timescale
    container_name: timescale
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U orion" ]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 60s
    environment:
      - POSTGRES_USER=orion
      - POSTGRES_PASSWORD=orion
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5433:5432"
    networks:
      - fiware_network

  mintaka:
    #image: fiware/mintaka:0.4.3
    image: quay.io/fiware/mintaka:0.6.0
    hostname: mintaka
    restart: always
    container_name: mintaka
    environment:
      - DATASOURCES_DEFAULT_HOST=timescale
      - DATASOURCES_DEFAULT_USERNAME=orion
      - DATASOURCES_DEFAULT_PASSWORD=orion
      - DATASOURCES_DEFAULT_DATABASE=orion

    ports:
      - "8080:8080"
    networks:
      - fiware_network
  
  # Node-RED
  nodered:
    image: nodered/node-red
    container_name: nodered
    user: root
    ports:
      - "1881:1880"  # Cambia el puerto público a 1881
    networks:
      - fiware_network
    volumes:
      - ./nodered_data:/data  # Monta toda la carpeta /data para persistencia
      - ./context.jsonld:/data/context.jsonld  # Ajusta esta ruta al archivo JSON-LD en tu máquina
      - ./context_enviroment.jsonld:/data/user-context.jsonld
    restart: always
    command: --settings /data/settings.js --port 1880 --ip 0.0.0.0
    #user: "${UID}:${GID}"


  iot-agent:
    image: quay.io/fiware/iotagent-json:latest
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      mongo-db:
        condition: service_healthy
    networks:
      - fiware_network

    ports:
      - '4041:4041'
      - '7896:7896'
    environment:
      - IOTA_CB_HOST=orion
      - IOTA_CB_PORT=1026
      - IOTA_NORTH_PORT=4041
      - IOTA_REGISTRY_TYPE=mongodb
      - IOTA_LOG_LEVEL=DEBUG
      - IOTA_TIMESTAMP=true
      - IOTA_CB_NGSI_VERSION=ld
      - IOTA_AUTOCAST=true
      - IOTA_MONGO_HOST=mongo-db
      - IOTA_FALLBACK_TENANT=campus-service
      - IOTA_MONGO_PORT=27017
      - IOTA_MONGO_DB=iotagentul
      - IOTA_HTTP_PORT=7896
      - IOTA_MQTT_HOST=155.54.95.168
      - IOTA_MQTT_PORT=1883
      - IOTA_MQTT_USERNAME=alvaro
      - IOTA_MQTT_PASSWORD=Un-Ah3tuwcaq
      - IOTA_JSON_LD_CONTEXT=http://nodered:1880/context

  lepus:
    image: quay.io/fiware/lepus
    container_name: fiware-lepus
    hostname: adapter
    networks:
      - fiware_network
    expose:
      - "3005"
    ports:
      - "3005:3000"
    #entrypoint: ["tail", "-f", "/dev/null"]
    environment:
      DEBUG: "adapter:*"
      NGSI_V2_CONTEXT_BROKER: "http://nodered:1880/lepusproxy"
      USER_CONTEXT_URL: "http://nodered:1880/user-context"
      CORE_CONTEXT_URL: "https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.8.jsonld"
      NOTIFICATION_RELAY_URL: "http://adapter:3000/notify"
    #depends_on:
     # - nodered

volumes:
  mongo-db: ~

networks:
  fiware_network:
    driver: bridge
